else{
beta_set[index]<-rnorm(n=1,mean=Nu/De,sd=sqrt(sg[iter-1,1]/De))
}
return(beta_set[index])
}
beta_selection_ft_2=function(iter,data_set,beta_set,tau,z){
Nu<-t(y)%*%data_set
De<-t(data_set)%*%data_set+(1/tau)
rn=sample(c(0,1),size=1,prob=c(z,1-z))
if(rn==0){
beta_set<-0}
else{
beta_set<-rnorm(n=1,mean=Nu/De,sd=sqrt(sg[iter-1,1]/De))
}
return(beta_set)
}
#================================================================#
# gibbs sampling=================================================#
#i is iteration
#j is the number of parameters
#================================================================#
for(i in 2:iter){
#non.linear
for(j in 1:non.lin){
lfdr.list[[j]][i,]=local_fdr_ft(i,basis[[j]],temp_beta_set[[j]],pi0[[j]],tau.res[[j]])}
#linear
for(j in (totl.x-lin+1):totl.x){
lfdr.list[[j]][i,]=local_fdr_ft_2(i,basis[[non.lin+1]][,j-non.lin],temp_beta_set[[j]],pi0[[j]],tau.res[[j]])
}
#---------------------------------------------------------------------------------
#non.linear
for(k in 1:non.lin){
for(j in 1:p){
temp_beta_set[[k]][j]<-beta_selection_ft(i,j,basis[[k]],temp_beta_set[[k]],tau.res[[k]],lfdr.list[[k]][i,])
}}
#linear
for(k in (totl.x-lin+1):totl.x){
temp_beta_set[[k]]<-beta_selection_ft_2(i,basis[[non.lin+1]][,k-non.lin],temp_beta_set[[k]],tau.res[[k]],lfdr.list[[k]][i,])
}
#---------------------------------------------------------------------------------
for(k in 1:totl.x) Beta.list[[k]][i,]<-temp_beta_set[[k]]
#---------------------------------------------------------------------------------
for(h in 1:non.lin){
pi0[[h]]=rbeta(n=1,shape1=k_pi*eta+length(which(Beta.list[[h]][i,]==0)),shape2=k_pi*(1-eta)+p-length(which(Beta.list[[h]][i,]==0)))
}
for(h in (totl.x-lin+1):totl.x){
pi0[[h]]=rbeta(n=1,shape1=k_pi*eta+length(which(Beta.list[[h]][i,]==0)),shape2=k_pi*(1-eta)+1-length(which(Beta.list[[h]][i,]==0)))
}
#---------------------------------------------------------------------------------
Dtau_nonlin = lapply(1:non.lin, function(k) diag(c(tau.res[[k]])))
Dtau_lin<-c()
for(k in 1:q) Dtau_lin[k]=tau.res[[k+non.lin]]
Dtau_lin    = diag(Dtau_lin)
#---------------------------------------------------------------------------------
linear.beta<-c()
for(k in 1:q) linear.beta[k]=Beta.list[[k+non.lin]][i,]
ZZ       = Reduce("+",lapply(1:totl.x,function(k) length(which(Beta.list[[k]][i,]==0))))
part1_sg = y-Reduce("+",lapply(1:non.lin,function(k) basis[[k]]%*%Beta.list[[k]][i,]))-basis[[non.lin+1]]%*%linear.beta
part2_sg = Reduce("+",lapply(1:non.lin, function(k) t(Beta.list[[k]][i,])%*%solve(Dtau_nonlin[[k]])%*%Beta.list[[k]][i,]))
sg[i]<-rinvgamma(n=1,shape=0.5*(n+non.lin*p+q-ZZ-1),
scale=0.5*(t(part1_sg)%*%part1_sg+part2_sg+t(linear.beta)%*%solve(Dtau_lin)%*%linear.beta)
)
#---------------------------------------------------------------------------------
mu[i]<-rnorm(n=1,mean=mean(ystar),sd=sqrt(sg[i]/n))
#---------------------------------------------------------------------------------
#non.linear
tau.res=lapply(1:non.lin,function(k) (Beta.list[[k]][i,]==0)*rexp(n=p,rate=lambda.res/2)+
(Beta.list[[k]][i,]!=0)*1/rinvgauss(n=p,mean=sqrt((lambda.res*sg[i,])/Beta.list[[k]][i,]^2),shape=lambda.res))
#linear
for(kk in (totl.x-lin+1):totl.x){
tau.res[[kk]]<-(Beta.list[[kk]][i,]==0)*rexp(n=1,rate=lambda.res/2)+
(Beta.list[[kk]][i,]!=0)*1/rinvgauss(n=1,mean=sqrt((lambda.res*sg[i,])/Beta.list[[kk]][i,]^2),shape=lambda.res)
}
#---------------------------------------------------------------------------------
lambda.res=rgamma(n=1,shape=non.lin*p+lin+r,rate=sum(unlist(tau.res))/2+delta)
if(i%%1==0){cat("Iteration ",i,"\r",sep="")}
if(i%%10000==0){ts.plot(sg[-c(1:burn)])}
}
##data input
rm(list=ls())
dat <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data") # prostate cancer data
lasso <- function(glambda = 0.05) {
##hyper parameter setting
max_iter = 100
set.seed(0)
beta_init = rnorm(8)
##normalize columns function
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
##soft threshold function
soft_threshold <- function(a, lambda) {
if ( -a > lambda) {
out = a + lambda
}
else if(a > lambda){
out = a - lambda
}
else{
out = 0
}
return(out)
}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(x[,j]%*%x[,j])#sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
res = soft_threshold(a,glambda/2)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = train[,9]
out = cylcic(x = x,y = y,beta_init = beta_init)
outlast = tail(out,1)
rownames(outlast)=NULL
return(outlast)
}
## grid search for lasso and make dataframe with lambda and coefficient
ldf = lasso(0)
for (i in seq(from=1,to=118,by=1)) {
ldf = rbind(ldf,lasso(i))
}
row.names(ldf) = seq(from=0,to=118,by=1)
ldf = data.frame(ldf)
## ploting with shrinkage Factor s
ldf$shrinkage = apply(X = ldf,FUN = function(x) sum(abs(x))/sum(abs(ldf[1,])),MARGIN = 1)
plotlasso <- function() {
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
legend(0, 1, legend=colnames(ldf)[1:8],lty = rep(1,8), col=coldic, cex = 0.6)
}
plotlasso()
## use test data and find the minimun mse point
## test data input
test = dat[!dat$train,]
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
nor_test = apply(X = test,FUN = normalize ,MARGIN = 2)
nor_te1st = data.frame(nor_test)
test_x = nor_test[,-9:-10]
test_y = test[,9]
## make the mse function and add test mse column
return_mse = function(beta){
yhat = as.matrix(test_x)%*%as.matrix(beta)
return(sum((yhat-test_y)^2))
}
ldf$test_mse = apply(X = ldf[,-9],FUN = return_mse ,MARGIN = 1)
## plot with minimum mse point
plotlasso_withmse <- function() {
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
abline(v=ldf[ldf$test_mse==min(ldf$test_mse),]$shrinkage, lty=2 , col='red')
legend(0, 1, legend=colnames(ldf)[1:8],lty = rep(1,8), col=coldic, cex = 0.6)
}
plotlasso_withmse()
## coefficient when test mse is minimum
ldf[ldf$test_mse==min(ldf$test_mse),]
## minimum lambda when all coefiicients are zero
print(rownames(head(ldf[ldf$lcavol==0,],1)))
head(ldf[ldf$lcavol==0,],1)
#install.packages("MCMCpack");install.packages("statmod")
#setwd("C:\\Users\\LeeChangHwan\\Google ?뱶?씪?씠釉?\\SIMULATION\\1209")
#load("simulation_1215.RData")
library(MCMCpack);library(statmod)
rm(list=ls())
seednum=115676634
#346269for(seed in 1:length(seednum)) {1213415
set.seed(seednum)
RESULT.indicator   <-list(NA)
RESULT.quantile    <-list(NA)
RESULT.sigma       <-list(NA)
function.list      <-list(NA)
cord.y             <-list(NA)
DATA               <-list(NA)
basis              <-list(NA)
lambda.res         <-list(NA)
knot                   =function(x,knot){abs((x-knot))^2*log(abs((x-knot))^2)}
knot_radial            =function(x,knot){abs(x-knot)^3}
standardizing_function =function(x){(x-mean(x))/sd(x)}
#--------------------------------------------------------
function.list<-
c(
simulation.plot.1=function(x){2*exp(-30*(x-0.2)^2)+exp(-50*(x-0.7)^2)}
,simulation.plot.2=function(x){sin(2*pi*x)}
,simulation.plot.3=function(x){x}
,simulation.plot.4=function(x){-0.75*x}
,simulation.plot.5=function(x){rep(0,length(x))}
,simulation.plot.6=function(x){rep(0,length(x))}
,simulation.plot.7=function(x){rep(0,length(x))}
,simulation.plot.8=function(x){rep(0,length(x))}
)
#function setting----------------------------------------
#=======================================================#
#====================hyperparameter=====================#
#=======================================================#
k_pi      =2
eta       =1/2
r         =1
delta     =100
#=======================================================#
#=====================setting===========================#
#=======================================================#
n             =800             # of sample
iter          =90000           # iteration
burn          =10000          # burn-in period
iter          =iter+burn
knot_num      =15             # of knots
true_mu       =0
true_sg       =sqrt(1)       # sigma
true.line.beta=c(0.6,-1,rep(0,4))
non.lin       =8
lin           =6
totl.x        =non.lin+lin
tau.res            <-vector("list",totl.x)
lfdr.list          <-vector("list",totl.x)
Beta.list          <-vector("list",totl.x)
temp_beta_set      <-vector("list",totl.x)
pi0                <-vector("list",totl.x)
#x setting -------------------------------------------------
start_x       =0
end_x         =1
x             =runif(n,start_x,end_x)
kn            =ppoints(knot_num)
DATA          =lapply(1:non.lin,function(j) runif(n,start_x,end_x))
M.DATA        =lapply(1:non.lin,function(j) matrix(rep(DATA[[j]],knot_num+1),nrow=n,ncol=knot_num+1))
for(j in 1:non.lin){for(i in 1:knot_num){M.DATA[[j]][,i+1]<-knot_radial(M.DATA[[j]][,i+1],kn[i])}} # apply basis
for(j in 1:length(M.DATA)){basis[[j]]=apply(M.DATA[[j]],2,standardizing_function)}          # apply standardizing
basis.candid<-matrix(NA,nrow=n,ncol=lin)
#categorical data
for(j in c(1,3,5)){basis.candid[,j]<-sample(c(1,2),n,prob=c(0.5,0.5),replace=T)}
for(j in c(2,4,6)){basis.candid[,j]<-sample(c(1,2,3),n,prob=c(1/3,1/3,1/3),replace=T)}
basis[[length(M.DATA)+1]]<-apply(basis.candid,2,standardizing_function)
p<-knot_num+1                      #non.linear coef number
q<-ncol(basis[[length(M.DATA)+1]]) #linear number
#=====================================================
#simulation===========================================
#=====================================================
#=====================================================
#save(gibbs)
#=====================================================
#non.linear
for(k in 1:non.lin){
lfdr.list[[k]]    <-matrix(0,nrow=iter,ncol=p)
Beta.list[[k]]    <-matrix(1,nrow=iter,ncol=p)
tau.res[[k]]      <-matrix(0.2^2,nrow=1,ncol=p)
temp_beta_set[[k]]<-c(rep(0,p))
}
#linear
for(k in (totl.x-lin+1):totl.x) {
lfdr.list[[k]]    <-matrix(0,nrow=iter,ncol=1)
Beta.list[[k]]    <-matrix(0,nrow=iter,ncol=1)
tau.res[[k]]      <-matrix(0.2^2,nrow=1,ncol=1)
temp_beta_set[[k]]<-0
}
lambda.res     <-0.01
sg             <-matrix(0.2^2,nrow=iter,ncol=1)
mu             <-matrix(0,nrow=iter,ncol=1)
pi0            <-lapply(1:totl.x, function(x) matrix(0,nrow=1,ncol=1))
# standardization=============================================#
#=============================================================#
yy1   = Reduce("+",lapply(1:non.lin,function(j) function.list[[j]](DATA[[j]])))
yy2   = basis.candid[,1]*true.line.beta[1]+true.line.beta[2]*basis.candid[,2]
ystar = yy1+yy2+rnorm(n,0,sd=true_sg)
y     = ystar-mean(ystar)
par(mfrow=c(2,4),mar=c(4,2,1,1))
for(j in 1:8) plot(DATA[[j]],y)
# centered data plot
par(mfrow=c(2,3),mar=c(4,2,1,1))
for(j in 1:6) plot(basis.candid[,j],y)
#================================================================#
#functions using in Gibbs========================================#
#================================================================#
local_fdr_ft       =function(iter,data_set,beta_set,pi0,tau){
Nu=sapply(1:p,function(index) t(y-data_set[,-index]%*%beta_set[-index])%*%data_set[,index])
De=sapply(1:p,function(index) t(data_set[,index])%*%data_set[,index]+(1/tau[index]))
local_fdr=sapply(1:p,function(index) pi0/(pi0+(1-pi0)*
sqrt(1/(1+tau[index]*(t(data_set[,index])%*%data_set[,index])))*
exp(Nu[index]^2/(2*De[index]*sg[iter-1,]))))
return(local_fdr)
}
local_fdr_ft_2     =function(iter,data_set,beta_set,pi0,tau){
Nu=sapply(1:1,function(k) t(as.matrix(y))%*%as.matrix(data_set))
De=sapply(1:1,function(k) t(as.matrix(data_set))%*%as.matrix(data_set)+(1/tau[k]))
local_fdr=sapply(1:1,function(k) pi0/(pi0+(1-pi0)*
sqrt(1/(1+tau[k]*(t(data_set)%*%data_set)))*
exp(Nu[k]^2/(2*De[k]*sg[iter-1,]))))
return(local_fdr)
}
beta_selection_ft  =function(iter,index,data_set,beta_set,tau,z){
Nu<-t(y-data_set[,-index]%*%beta_set[-index])%*%data_set[,index]
De<-t(data_set[,index])%*%data_set[,index]+(1/tau[index])
rn=sample(c(0,1),size=1,prob=c(z[index],1-z[index]))
if(rn==0){
beta_set[index]<-0}
else{
beta_set[index]<-rnorm(n=1,mean=Nu/De,sd=sqrt(sg[iter-1,1]/De))
}
return(beta_set[index])
}
beta_selection_ft_2=function(iter,data_set,beta_set,tau,z){
Nu<-t(y)%*%data_set
De<-t(data_set)%*%data_set+(1/tau)
rn=sample(c(0,1),size=1,prob=c(z,1-z))
if(rn==0){
beta_set<-0}
else{
beta_set<-rnorm(n=1,mean=Nu/De,sd=sqrt(sg[iter-1,1]/De))
}
return(beta_set)
}
#================================================================#
# gibbs sampling=================================================#
#i is iteration
#j is the number of parameters
#================================================================#
for(i in 2:iter){
#non.linear
for(j in 1:non.lin){
lfdr.list[[j]][i,]=local_fdr_ft(i,basis[[j]],temp_beta_set[[j]],pi0[[j]],tau.res[[j]])}
#linear
for(j in (totl.x-lin+1):totl.x){
lfdr.list[[j]][i,]=local_fdr_ft_2(i,basis[[non.lin+1]][,j-non.lin],temp_beta_set[[j]],pi0[[j]],tau.res[[j]])
}
#---------------------------------------------------------------------------------
#non.linear
for(k in 1:non.lin){
for(j in 1:p){
temp_beta_set[[k]][j]<-beta_selection_ft(i,j,basis[[k]],temp_beta_set[[k]],tau.res[[k]],lfdr.list[[k]][i,])
}}
#linear
for(k in (totl.x-lin+1):totl.x){
temp_beta_set[[k]]<-beta_selection_ft_2(i,basis[[non.lin+1]][,k-non.lin],temp_beta_set[[k]],tau.res[[k]],lfdr.list[[k]][i,])
}
#---------------------------------------------------------------------------------
for(k in 1:totl.x) Beta.list[[k]][i,]<-temp_beta_set[[k]]
#---------------------------------------------------------------------------------
for(h in 1:non.lin){
pi0[[h]]=rbeta(n=1,shape1=k_pi*eta+length(which(Beta.list[[h]][i,]==0)),shape2=k_pi*(1-eta)+p-length(which(Beta.list[[h]][i,]==0)))
}
for(h in (totl.x-lin+1):totl.x){
pi0[[h]]=rbeta(n=1,shape1=k_pi*eta+length(which(Beta.list[[h]][i,]==0)),shape2=k_pi*(1-eta)+1-length(which(Beta.list[[h]][i,]==0)))
}
#---------------------------------------------------------------------------------
Dtau_nonlin = lapply(1:non.lin, function(k) diag(c(tau.res[[k]])))
Dtau_lin<-c()
for(k in 1:q) Dtau_lin[k]=tau.res[[k+non.lin]]
Dtau_lin    = diag(Dtau_lin)
#---------------------------------------------------------------------------------
linear.beta<-c()
for(k in 1:q) linear.beta[k]=Beta.list[[k+non.lin]][i,]
ZZ       = Reduce("+",lapply(1:totl.x,function(k) length(which(Beta.list[[k]][i,]==0))))
part1_sg = y-Reduce("+",lapply(1:non.lin,function(k) basis[[k]]%*%Beta.list[[k]][i,]))-basis[[non.lin+1]]%*%linear.beta
part2_sg = Reduce("+",lapply(1:non.lin, function(k) t(Beta.list[[k]][i,])%*%solve(Dtau_nonlin[[k]])%*%Beta.list[[k]][i,]))
sg[i]<-rinvgamma(n=1,shape=0.5*(n+non.lin*p+q-ZZ-1),
scale=0.5*(t(part1_sg)%*%part1_sg+part2_sg+t(linear.beta)%*%solve(Dtau_lin)%*%linear.beta)
)
#---------------------------------------------------------------------------------
mu[i]<-rnorm(n=1,mean=mean(ystar),sd=sqrt(sg[i]/n))
#---------------------------------------------------------------------------------
#non.linear
tau.res=lapply(1:non.lin,function(k) (Beta.list[[k]][i,]==0)*rexp(n=p,rate=lambda.res/2)+
(Beta.list[[k]][i,]!=0)*1/rinvgauss(n=p,mean=sqrt((lambda.res*sg[i,])/Beta.list[[k]][i,]^2),shape=lambda.res))
#linear
for(kk in (totl.x-lin+1):totl.x){
tau.res[[kk]]<-(Beta.list[[kk]][i,]==0)*rexp(n=1,rate=lambda.res/2)+
(Beta.list[[kk]][i,]!=0)*1/rinvgauss(n=1,mean=sqrt((lambda.res*sg[i,])/Beta.list[[kk]][i,]^2),shape=lambda.res)
}
#---------------------------------------------------------------------------------
lambda.res=rgamma(n=1,shape=non.lin*p+lin+r,rate=sum(unlist(tau.res))/2+delta)
if(i%%1==0){cat("Iteration ",i,"\r",sep="")}
if(i%%10000==0){ts.plot(sg[-c(1:burn)])}
}
#=====================================================================#
data_t<-t<-seq(start_x,end_x,length.out=100)
data_t=matrix(rep(data_t,knot_num+1),nrow=length(data_t),ncol=knot_num+1)
for(i in 1:knot_num){data_t[,i+1]=knot_radial(data_t[,i+1],kn[i])}
data_t[data_t=="NaN"]=0
data_t=apply(data_t,2,standardizing_function)
#-----------------------------------------------------------------------------
alpha=0.15
order.signif       =order(unlist(indiplot),decreasing = T)
j.star             =if(length(which(cumsum(1-unlist(indiplot)[order.signif])/seq(1,non.lin*p+lin,1)<alpha))==0){
cat("need to reset alpha")}else{max(which(cumsum(1-unlist(indiplot)[order.signif])/seq(1,non.lin*p+lin,1)<alpha))}
phi.alpha          =unlist(indiplot)[order.signif[j.star]]
K.final            =which(unlist(indiplot)>phi.alpha)
#-----------------------------------------------------------------------------
index =lapply(1:non.lin,function(j) seq((j-1)*p+1,j*p,1))
TT    =vector("list",non.lin)
RES.1<-c()
for(u in 1:length(K.final)){
if(K.final[u]<p+1){RES.1[u]<-1}
else if(p<K.final[u]&K.final[u]<2*p+1){RES.1[u]<-2}
else if(2*p<K.final[u]&K.final[u]<3*p+1){RES.1[u]<-3}
else if(3*p<K.final[u]&K.final[u]<4*p+1){RES.1[u]<-4}
else if(4*p<K.final[u]&K.final[u]<5*p+1){RES.1[u]<-5}
else if(5*p<K.final[u]&K.final[u]<6*p+1){RES.1[u]<-6}
else if(6*p<K.final[u]&K.final[u]<7*p+1){RES.1[u]<-7}
else if(7*p<K.final[u]&K.final[u]<8*p+1){RES.1[u]<-8}
else if(8*p<K.final[u]&K.final[u]<9*p+1){RES.1[u]<-9}
else {RES.1[u]<-10}
}
RES=data.frame(RES.1,K.final-(RES.1-1)*p,K.final)
colnames(RES)<-c("a","b","c")
for(u in 1:non.lin){
TT[[u]]=RES$b[which(RES$a==u)]
}
#-----------------------------------------------------------------------------
burn=30000
indiplot=vector("list",totl.x)
# plot of estimate of local fdr
indicator.list=lapply(1:non.lin,function(x) matrix(0, nrow=iter, ncol=p))
for(j in 1:non.lin){
for(i in 1:iter){
indicator.list[[j]][i,]<-(Beta.list[[j]][i,]!=0)*1
}
}
for(j in 1:non.lin) indicator.list[[j]]<-indicator.list[[j]][-c(1:burn),]
for(k in 1:non.lin) indiplot[[k]]=apply(indicator.list[[k]],2,mean)
for(k in 9:14) indiplot[[k]]<-mean(((Beta.list[[k]]!=0)*1)[-c(1:burn),])
postscript("simlfdr1215_2.eps",horizontal=F,onefile=F,print.it=F,height=3,width=8)
par(mfrow=c(1,1),mar=c(3,3,1,1))
plot(unlist(indiplot)[61:126],lwd=2,type="h",xlab="",ylab="",ylim=c(0,1),xlim=c(1,64),xaxt="n")
mtext(side=2,expression(p[j]),2)
for(k in 1:4) abline(v=p*k+0.5,lty=2,col=1,lwd=1)
abline(h=phi.alpha,lty=1,col=1)
#points(K.final,unlist(indiplot)[K.final],pty=2,pch=1)
points(c(61,62),unlist(indiplot)[c(61+60,62+60)],pty=2,pch=1)
mtext(side=1,expression(f[5]),line=0.75,at=7.5);mtext(side=1,expression(f[6]),line=0.75,at=7.5+15)
mtext(side=1,expression(f[7]),line=0.75,at=7.5+30);mtext(side=1,expression(f[8]),line=0.75,at=7.5+45)
mtext(side=1,expression(beta),line=0.75,at=3.5+60)
dev.off()
#-----------------------------------------------------------
postscript("simsg1215.eps",horizontal=F,onefile=F,print.it=F,height=2,width=8)
par(mex=0.1,mar=c(3,3,.1,.1)+1,cex=0.9,mfrow=c(1,3))
plot(0,xaxt="n",yaxt="n",bty="n",pch="",xlab="",ylab="")
hist(sg[-c(1:burn)],main="",xlab="",ylab="Posterior density",freq=F)
abline(v=true_sg^2,lty=2,lwd=2);mtext(side=1,expression(sigma^2),2.4)
dev.off()
#-----------------------------------------------------------
postscript("simpar1215.eps",horizontal=F,onefile=F,print.it=F,height=5,width=8)
layout(matrix(c(1,2,2,3,3,4,4,5,6,6,7,7,8,8,9,9),2,8,byrow=T))
par(mex=0.1,mar=c(3,3,.1,.1)+1,cex=0.9,mfrow=c(3,2))
#plot(0,xaxt="n",yaxt="n",bty="n",pch="",xlab="",ylab="")
hist(Beta.list[[9]][-c(1:burn),1]/sd(basis.candid[,1]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[1],lty=2,lwd=2);mtext(side=1,expression(beta[1]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
hist(Beta.list[[10]][-c(1:burn),1]/sd(basis.candid[,2]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[2],lty=2,lwd=2);mtext(side=1,expression(beta[2]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
hist(Beta.list[[11]][-c(1:burn),1]/sd(basis.candid[,3]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[3],lty=2,lwd=2);mtext(side=1,expression(beta[3]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
#plot(0,xaxt="n",yaxt="n",bty="n",pch="",xlab="",ylab="")
hist(Beta.list[[12]][-c(1:burn),1]/sd(basis.candid[,4]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[4],lty=2,lwd=2);mtext(side=1,expression(beta[4]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
hist(Beta.list[[13]][-c(1:burn),1]/sd(basis.candid[,5]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[5],lty=2,lwd=2);mtext(side=1,expression(beta[5]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
hist(Beta.list[[14]][-c(1:burn),1]/sd(basis.candid[,6]),main="",xlab="",ylab="",freq=F)
abline(v=true.line.beta[6],lty=2,lwd=2);mtext(side=1,expression(beta[6]),2.5);mtext(side=2,"Posterior density",cex=0.9,2.5)
par(mex=0.1,mar=c(3,3,.1,.1)+1,cex=0.9,mfrow=c(1,1))
hist(sg[-c(1:burn)],main="",xlab="",ylab="",freq=F);mtext(side=2,"Posterior density",cex=0.9,2.5)
abline(v=true_sg^2,lty=2,lwd=2);mtext(side=1,expression(sigma^2),2.4)
dev.off()
#------------------------------------------------------------------------------------
# result without FDR based selection
output.list.1=lapply(1:non.lin, function(x) matrix(NA,nrow=length(t),ncol=iter))
for(k in 1:non.lin){
for(i in 1:length(t)){
output.list.1[[k]][i,]=sapply(1:iter,function(j) (data_t[i,])%*%Beta.list[[k]][j,])
}
}
